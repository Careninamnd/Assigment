# -*- coding: utf-8 -*-
"""Final_Project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19TIyDQfTd4cwk9adodIotc_wb0g5r-cg

# **Final Project 2**
### **1. Perkenalan**

Nama Anggota Kelompok :
1. Carenina Amanda Putri / PYTN-KS12-017
2. Aurisha Lutvinda Putrian / PYTN-KS12-014
3. Muhammad Rafi Ramadhan / PYTN-KS12-002

### 1.1 Latar Belakang

##latar BELAKANG

## 1.2 Objektif
- Mampu memahami konsep regression dengan##
- Mampu mempersiapkan data untuk digunakan dalam model##
- Mampu mengimplementasikan ## untuk membuat prediksi

## **2. Import Data**
pada bagian ini menggunakan import library untuk melakukan preproceesing, visualisasi dan modelling
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from sklearn.datasets import load_files
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from nltk import FreqDist
import numpy as np
from sklearn.linear_model import SGDClassifier
from sklearn import metrics
from sklearn.model_selection import GridSearchCV
from nltk import NaiveBayesClassifier
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from flask import Flask, request, jsonify, render_template
from sklearn.model_selection import train_test_split
from pandas.plotting import scatter_matrix
# %matplotlib inline
pd.options.mode.chained_assignment = None
import warnings
warnings.filterwarnings('ignore')

"""## **3. Data Loading**

## 3.1 Read Dataframe dari source CSV
memasukkan dataframe, dataframe yang digunakan kali ini adalah dataframe **xxx**, yang kemudian menampilkan data teratas
"""

df = pd.read_csv ('/content/drive/MyDrive/weatherAUS.csv')
df

"""## 3.2 Menampilkan data teratas"""

df.shape

print("Dataset berisi {} baris dan {} kolom (atribut)".format(df.shape[0], df.shape[1]))
df.head()

"""Data Set ini memiliki 23 atribut antara lain:
1. Date - tanggal hari itu
2. Location - lokasi, nama kota di Australia
3. MinTemp - temperatur terendah hari itu dalam celcius
4. MaxTemp - temperatur tertinggi hari itu dalam celcius
5. Rainfall - jumlah curah hujan hari itu dalam mm
6. Evaporation - jumlah evaporasi dalam mm dari Class A pan selama 24 jam
sebelum jam 9 pagi hari itu
7. Sunshine - jumlah jam hari itu cerah dengan cahaya matahari
8. WindGustDir - arah kecepatan angin yang paling tinggi selama 24 jam sebelum
jam 12 malam hari itu
9. WindGustSpeed - kecepatan angin yang paling tinggi dalam km/jam selama 24
jam sebelum jam 12 malam hari itu
10. WindDir9am - arah angin jam 9 pagi
11. WindDir3pm - arah angin jam 3 sore
12. WindSpeed9am - kecepatan angin jam 9 pagi dalam km/jam dihitung dari
rata-rata kecepatan angin 10 menit sebelum jam 3 sore
13. WindSpeed3pm - kecepatan angin jam 3 sore dalam km/jam dihitung dari
rata-rata kecepatan angin 10 menit sebelum jam 3 sore
14. Humidity9am - humiditas jam 9 pagi dalam persen
15. Humidity3pm - humiditas jam 3 sore dalam persen
16. Pressure9am - tekanan udara jam 9 pagi dalam hpa
17. Pressure3pm - tekanan udara jam 3 sore dalam hpa
18. Cloud9am - persentase langit yang tertutup awan jam 9 pagi. dihitung dalam
oktas, unit ⅛, menghitung berapa unit ⅛ dari langit yang tertutup awan. Jika 0,
langit cerah, jika 8, langit sepenuhnya tertutup awan.
19. Cloud3pm - persentase langit yang tertutup awan jam 3 sore
20. Temp9am - temperatur jam 9 pagi dalam celcius
21. Temp3pm - temperatur jam 3 sore dalam celcius
22. RainToday - apakah hari ini hujan: jika curah hujan 24 jam sebelum jam 9 pagi
melebihi 1mm, maka nilai ini adalah 1, jika tidak nilai nya 0
23. RainTomorrow - variable yang mau di prediksi

### 3.3 Melihat data terbawah
"""

df.tail()

"""### 3.4 Melihat informasi kolom, baris, dan data type"""

df.info()

"""### 3.5 Melihat Statistik Dataframe secara umum"""

df.describe()

"""### 3.6 Mengecek statistik deskriptif dari masing-masing atribut yang bertipe object"""

df.describe().T

"""### 3.7 Melihat banyaknya unique values untuk tiap atribut."""

for col in df.columns:
    print(col,': ', df[col].nunique())

df_copy = df.copy()
df_copy[['MinTemp','MaxTemp','Rainfall','Evaporation','Sunshine','WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Cloud9am','Cloud3pm','Temp9am','Temp3pm']] = df_copy[['MinTemp','MaxTemp','Rainfall','Evaporation','Sunshine','WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Cloud9am','Cloud3pm','Temp9am','Temp3pm']].replace(0,np.nan)
print(df_copy.isnull().sum())

"""### 3.5 Melihat Statistik Dataframe secara umum"""

df.describe()

"""### 3.6 Mengecek statistik deskriptif dari masing-masing atribut yang bertipe object"""

df.describe().T

"""### 3.7 Melihat banyaknya unique values untuk tiap atribut."""

for col in df.columns:
    print(col,': ', df[col].nunique())

df_copy = df.copy()
df_copy[['MinTemp','MaxTemp','Rainfall','Evaporation','Sunshine','WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Cloud9am','Cloud3pm','Temp9am','Temp3pm']] = df_copy[['MinTemp','MaxTemp','Rainfall','Evaporation','Sunshine','WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Cloud9am','Cloud3pm','Temp9am','Temp3pm']].replace(0,np.nan)
print(df_copy.isnull().sum())

"""### 4. Data Cleaning

4.1 Mengecek apakah ada duplikat value
"""

df.duplicated().sum()

"""### 4.2 Menampilkan jumlah serta persentase dari missing value yang terdapat pada dataset"""

mv = pd.DataFrame({"Missing Value":df.isna().sum(), "Persentase":df.apply(lambda x: f'{((x.isnull().sum()/df.shape[0])*100).round(2)} %')})
mv

"""### 4.3 Drop Attribut yang memiliki persentase missing value diatas 35 persen"""

df.drop(columns=['Evaporation','Sunshine','Cloud9am','Cloud3pm'],inplace=True, axis=1)

df.shape

"""Dapat terlihat bahwa jumlah attribut yang ada berkurang dari 23 menjadi 19 buah."""

df.head()

df.shape

"""Hasil dadri explorasi data terdapat 145460 instances dan 23 variable di dalam data set"""

df_copy.hist(figsize=(15,15))

"""### 3.9 Melihat"""

df['Location'].unique()

df_copy.hist(figsize = (15,15))

p=scatter_matrix(df_copy,figsize=(25, 25))

sns.pairplot(df_copy)

plt.figure(figsize=(12,10))
sns.heatmap(df_copy.corr(), annot=True,cmap ='RdYlGn')

columns = list(df)[0:-1]
df_copy[columns].hist(stacked=False, bins=100, figsize=(12,30), layout=(14,2));

"""## **4. Data Cleaning**"""

df.duplicated().sum()

df['Evaporation'].isnull().sum()

print(df['Evaporation'].isnull().sum()/df.shape[0] * 100, '%')

df2 = df.drop(df[df['Evaporation'].isnull()].index)

df.shape, df2.shape

df2.isnull().sum()

df['Evaporation'].isnull().sum()

df = df.dropna()

df['Evaporation'].isnull().sum()

df.info()

"""##**Identify Correlation**


"""

df_copy.corr()

#Korelasi dalam representasi grafis
def plot_corr(df, size=11):
    corr = df.corr()
    fig, ax = plt.subplots(figsize=(size, size))
    ax.matshow(corr)
    plt.xticks(range(len(corr.columns)), corr.columns)
    plt.yticks(range(len(corr.columns)), corr.columns)

"""### **Spliting the data**"""

from sklearn.model_selection import train_test_split

X = df_copy.drop('Evaporation',axis=1)     # Predictor feature columns (8 X m)
Y = df_copy['Evaporation']   # Predicted class (1=True, 0=False) (1 X m)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=1)
# 1 is just any random seed number

x_train.head()

print("{0:0.2f}% data is in training set".format((len(x_train)/len(df_copy.index)) * 100))
print("{0:0.2f}% data is in test set".format((len(x_test)/len(df_copy.index)) * 100))

##tambahin ya